

MSW ( Mocking Service Worker ) -> 가상 서비스 일꾼
    -> 웹 페이지와 브라우저 사이에서 일하는 일꾼을 가상으로 만들어
        실제 서비스 워커 대신 api, 캐싱, 푸시, 동기화 등을 담당하여 실행할 수 있다.
        가상으로 웹 페이지와 같은 역할을 할 수 있는 일꾼을 만들어내는 것을 이야기

    -> 테스트 코드?
        a를 개발하기 위해 모듈을 수정 -> b, c, d, e, f 의존관계 가능성
            a를 수정하면 b, c, d, e, f  --> 하나는 에러가 날 수도 있음
                b, c, d, e, f를 직접 눌러보면서 에러가 있는지 확인 해야 할까요?
            그렇다고 테스트를 안하면? 사ㅣ용자 이용 간에 버그를 확인할 수 있음

        테스트코드는 사람이 하는 것보다 더 정확하고 빠른 컴퓨팅 테스트를 도입합으로서
        QA (품질평가) 비용을 줄이고, 인건비에 대한 코스트를 감소시키는 역할을 할 수 있음

        -> 테스트하면서 실제 백엔드 db에 데이터가 들어가면 될까?
            보통은 비동기 통신 테스팅은 하지 않습니다.
            비동기 통신을 가로채서 무효화 시킨후 mocking api를 테스트 많이하게 됩니다.

        = 테스트할 때 비동기 통신 가로채서 무효화 후 msw로 테스팅하는 방법도 있다.
        = 서비스 마다 달라진다. 비동기 통신 테스트 서버로 테스팅하는 것이 있음

    -> 백엔드 api가 없어도 동일한 환경에서 가상 api를 만들어 프론트엔드를 구현할 수 있다.
        (API 서버가 다운되거나 없어도 Mocking API를 활용하여 프론트엔드 개발 가능)
        (개발초기 단계에서 백엔드 없이도 프로토타입을 빠르게 제작 가능)

-------------------------------------------------------------------------------

redux-tool-kit


    redux에서 기존에 갖고 있던 문제점을 보완하기 위해 만든 해결책
    템플릿 코드가 기존 redux에 굉장히 많은 양이 감소했고, 불변성을 위한 immer나
    다른 라이브러리를 설치해야하는 미들웨어 (devtools)와 같은 것들을 자체적으로 지원해주는 라이브러리를

    => 리덕스를 보다 쉽게 사용할 수 있게 하는 라이브러리를
    
    그러나, 이런 장점에도 불구하요 여전히 템플릿 코드는 많으며 사실상 잘 찾지 않게 되는 코드가 되었음

    보통 실무에서도 reudx-saga와 rtk로 구현된 코드를 볼 가능성이 가장 높습니다.

-------------------------------------------------------------------------------

redux-middleware

    데이터를 효율적으로 운용할 수 있도록 중간에서 데이터 변환 및 중개

    비동기 통신에 관련된 미들웨어를 배워볼 것
    redux-saga, redux-thunk
                -----------

    redux는 기본적으로 동기적인 작업만 처리합니다.
    따라서 비동기 데이터를 다루기 위해 제약사항이 많이 생길 수 밖에 없다.

    ex)

        dispatch({
            type: "GET_LOADING"
        })

        try{
        const res = await api 통신...
            dispatch({
                type:"GET_SUCCESS"
            })
        } catch {
            dispatch({
                type: "GET_ERROR"
            })
        }
        

    redux-thunk란 비동기 통신함수를 다시 한번 함수로 감싸는 형태로 비동기 통신을 지원해주는 미들웨어

        dispatch(fetchData())

    실제 백엔드 데이터 로직은 thunk 함수 안에서 구현하고 UI는 하나의 dispatch만 보내면
    api 데이터 통신, 그에 따른 비동기로 받아온 데이터의 전역 상태 관리가 자동으로 이루어집니다.

    -------

    그러나 redux thunk를 직접 라이브러리를 설치하여 구현할 수 있음에도 rtk내에서 thunk를 자체지원하고 있으므로
    rtk를 사용할 예정

-------------------------------------------------------------------------------