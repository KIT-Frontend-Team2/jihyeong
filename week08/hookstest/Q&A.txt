Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 빠른 화면화 SPA의 특징
    - 대기업 메타의 개발 (많은 개발자들의 관심 => 많은 라이브러리)
    - 상태관리를 통한 필요한 부분에 한해 업데이트를 하고 나머지 부분은 그대로 냅둔다.
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 빠른 화면 전환을 통해 사용자가 느끼는 기다림의 시간을 줄일 수 있다.
    - 많은 개발자들의 관심을 통해 이미 많은 라이브러리들이 있고 해당 라이브러리를 통해 개발자가 직접 작성해야하는 코드를 줄일 수 있다.
    - 불필요한 값을 줄일 수 있다. (해당 상태에 관련된 것 이외에는 렌더링이 되지 않기 때문에)

Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 빠른 렌더링, 변경되지 않은 컴포넌트들을 업데이트하지 않기 위해서 (업데이트 비용 절약)
    - 코드의 가상 돔을 통해 각 페이지를 컴포넌트, 모듈화 하여 관리를 한다면 재사용하기 쉽고 관련된 상태가 변경이 되었을 때 
      위와 같이 이와 관련된 코드들만 업데이트가 된다.

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리렌더링


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 불필한한 요청을 통해 값이 처리비용이 안들수 있고, 클라이언트측에서는 자연스러운 페이지 변환을 경험 할 수 있다.


Q6. (Q4)은 리액트에서 어느 순간에 실현될까요?
    - 관련된 상태(state)과 변경이 되었을 때

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState
        값이 변경이 되었을 때 리렌더링을 해주어야 할 때
        ex) 값이 true 일 때는 리스트가 보여져야하고 false일 때에는 페이지 리스트가 보여지면 안된다. 이럴 경우 isWatch 라는 state를 만들어
        해당 값이 변경이 되었을 경우에만 보여지고 렌더링을 하고 다시 눌렀을 때 false일 때에는 안보여지게 할 수 있다. (삼항연산자 사용)
    (2) useRef
        불필요한 렌더링을 줄일수 있고 요소에 직접적으로 접근이 가능하다. 하지만 후자는 추천하지 않는 방법이다.
    (3) useEffect
        의존성 배열을 통해 처음 컴포넌트가 렌더링 되었을 경우, 해당 값이 변경 되었을 경우, 컴포넌트가 unmount 됐을 경우 사용될 로직을 적어주면 된다.
    (4) useCallback
        useCallback은 의존성 배열내에 있는 값이 변경이 되지 않았을 경우 처음 선언을 해두었던 함수가 그대로 결과값을 리턴한다. 복잡한 로직일 수록 결과를
        만들어 내는데에 시간이 오래 걸릴 수 있다. 그래서 useCallback을 사용하면 똑같은 값이 들어갔을 경우 복잡한 연산과정을 저장을 해두었던 값을 반환 한다.
        하지만 가벼운 로직일 경우 기억하는데에 있어서도 비용이 들기 때문에 가벼운 로직일 경우에는 사용하지 않는다. 
    (5) useMemo
        useMemo는 useCallback과 비슷한데 선언이 아니라 실행하는데에 있어서 다른점이 있다. 이는 의존성 배열에 들어가는 값이 다를경우 처음 한번만 실행이 된다.
        이또한 useCallback과 같이 가벼운 로직일 경우 실행하는데에 있어서 메모리비용이 들기 때문에 권하지 않는다.

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 값의 재사용이 아닌 복잡한 로직을 재사용(모듈화)하는데에 있어서 이점이 있다.
    - 커스텀 훅을 사용하면 해당 컴포넌트의 코드길이도 줄어든다. => 간결


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 재사용이 되는 페이지, 구역은 어떤게 있을까? 
    - 상태를 어느부분에 주어야 할까?
    - 커스텀 훅을 제작하는데에 있어서 사용하는 컴포넌트에 의존하지않고 코드를 어떻게 짜면 좋을
    - 다양한 라이브러리들중 라이브러리를 선택했을때 유용한 라이브러리보다 지속 가능한 라이브러리일지 생각을 해본다.

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    까
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - 요소에 직접적으로 접근해서 보여주는 요소들을 바꾸는 것이 아닌 상태를 통해 해당 상태에 맞는 컴포넌트들이 보여지게 설정을 해 줄 수 있다. 
    - 렌더링 됐을경우 다시한번 요소를 잡아서 이벤트를 부여해주고 하는 일이 없다 ***
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 다른 페이지에서도 재사용을 할 수 있는지, 한 페이지에서 section 별로 구역을 나누어 사용할 경우에도 나눌 수 있다.
     - 분리를 전부해둔다면. 다른 컴포넌트에 의존을 하는것이 줄어들고, 재사용이 간단한다, 디버깅이 쉽다는 장점도 있다.
     하지만 해당 페이지에서만 사용하는 로직까지 나눠서 작업을 하는경우 페이지가 너무 복잡해질 것 같다.
