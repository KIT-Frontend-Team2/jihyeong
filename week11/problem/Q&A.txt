

1. FLUX 패턴에 대하여 설명해보세요
    FLUX 패턴이란 React 애플리케이션에서 사용되는 상태 관리를 위한 아키텍처 패턴입니다. 기존 MVC 패턴과 달리 단방향으로 데이터가 
    흐르기 때문에 데이터양이 많아진다고 해서 복잡한 데이터 구조가 되는것이 아니다, 또한 단방향으로 되어있기 때문에 데이터 흐름의 추적이나 디버깅이 쉽다.

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
        => 로직의 분리, 재사용을 위해서 사용을 한다. 코드를 분리함으로서 원래 코드에서의 코드의 길이가 줄어들고 가독성이 좋아집니다.
        => 상태를 각각의 store에 저장을 해서 관리를 하기 때문에 서로에 대해 의존성을 줄여줄 수 있습니다.

    (2) useContext
        => 공통적으로 상태를 공유해야하는 컴포넌트들을 감싸 props를 통해 넘겨주지 않아도 상태들을 전역으로 사용이 가능하게 도와줍니다.

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
        => 리액트에서의 전역 상태를 아무렇지 않게 사용을 하다보면 의존성에 의해 불필요한 렌더링이 발생할 수 있습니다. 이러한 렌더링을 줄이고 반복되는 코드를
        줄여주기 위해서 사용을 합니다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요

        => 

        전역 상태관리로 사용해야 하는가?
        => 모든 상태들을 전역상태로 관리하는것은 해당 전역변수로 관리를 한다는것 자체가 기존의 관리보다 많은 관리 값을 요구합니다. 따라서 바람직 하지 않다고 봅니다.

        전역 상태 관리를 통해 얻을 수 있는 장점
        =>  반복되는 로직들을 짧게 재사용 할 수 있습니다. 해당 상태값이 불필요한 컴포넌트에서 필요한 컴포넌트까지 굳이 모든 컴포넌트에 props로 전달하지 않아도 사용을
        할 수 있게 됩니다.

        전역 상태 관리를 통해 얻을 수 있는 단점
        => 전역 상태들을 무분별하게 관리를 하다보면 전역 상태들로 인해 연산의 과정이 느려지거나 할 수 있을꺼 같습니다. 또한 기존의 상태값과 달리 모든 컴포넌트에서 사용을 할 수 있게
        변경이 되는거기 때문에 불필요한 렌더링이 발생할 수 있습니다.
        다양한 컴포넌트에서 해당 status 또는 로직을 사용하기 때문에 규모가 커질수록 복잡성이 증가할 수 있고, 기존의 useStatus와 같이 컴포넌트 내에서만 사용을 하는 상태와 달리 디버깅이나
        데이터의 추적에 대해 어려움을 느낄 수 있습니다.